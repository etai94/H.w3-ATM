.=torg + 1000
main:		mov #main, sp
			mov #0, -(sp) ; place in stack for the return value
			mov #Board, -(sp)
			mov Player, -(sp)
			jsr pc, CntPawn
			mov 4(sp), r5  ; for tests: see in pdp if its really count!
			halt

		 	; a branch that count the player (given in the stack, by value) pawns on board ( given in stack , by adress). 
			; stack order: [1.board 2. player 3. linking register]
			; use: 
			;r1 for iterating over the board. ; r0 is the number of squares in the board(for sob) ; r2 is the player number
			; r4 is a counter
CntPawn:	
; -----------------  push the registers we use to the stack: -----------------  

			mov r0, -(sp)
			mov r1, -(sp)
			mov r2, -(sp)
; -----------------  iniitilize registers values: -----------------  
			mov #64., r0 		; for loop control ( num of squares)
			mov 14(sp), r1		; r1 point to the first square address now
			mov 12(sp), r2		; r2 contain the player we count 
ChkLoop:	
			cmp (r1), r2
			beq AddPawn
LoopEnd:	add #2, r1
			sob r0, ChkLoop
			mov (sp)+, r2
			mov (sp)+, r1
			mov (sp)+, r0
			mov counter, 6(sp) ; save the return value
			
			rts pc
AddPawn:	add #1, counter	
			br LoopEnd
counter: 	.word 0



Board:		.word	0,	1,	0,	1,	0,	1,	0,	1
			.word	0,	0,	0,	0,	0,	0,	0,	0
			.word	0,	0,	0,	0,	0,	0,	0,	0
			.word	0,	0,	0,	0,	0,	0,	0,	0
			.word	0,	0,	0,	0,	0,	0,	0,	0
			.word	0,	0,	0,	0,	0,	0,	0,	0
			.word	0,	0,	0,	0,	0,	0,	0,	0
			.word	0,	0,	0,	0,	0,	0,	0,	0
			
Player:		.word	1